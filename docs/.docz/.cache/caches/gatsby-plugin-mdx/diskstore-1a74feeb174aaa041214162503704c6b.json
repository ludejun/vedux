{"expireTime":9007200832071340000,"key":"gatsby-plugin-mdx-entire-payload-65becd0b84ab8cdea7cb49cf334e06ac-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/ludejun/ludejun/vedux/docs/node_modules/@wmfe/gatsby-theme-pocket/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":120,"offset":121},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":123},"end":{"line":5,"column":29,"offset":151},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"高级使用","position":{"start":{"line":8,"column":3,"offset":156},"end":{"line":8,"column":7,"offset":160},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":7,"offset":160},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"同步/异步的setdata","position":{"start":{"line":10,"column":4,"offset":165},"end":{"line":10,"column":17,"offset":178},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":162},"end":{"line":10,"column":17,"offset":178},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"将快速接入的数据流稍作更改：\npages/index/index.js","position":{"start":{"line":12,"column":1,"offset":180},"end":{"line":13,"column":21,"offset":215},"indent":[1]}}],"position":{"start":{"line":12,"column":1,"offset":180},"end":{"line":13,"column":21,"offset":215},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"import { connect } from 'vedux';\nimport { fetchAPI } from '../../actions/home';\n\nconst pageConfig = {\n  data: {\n    motto: 'Hello World!',\n    userInfo: {},\n  },\n  onLoad() {\n    // 触发1次setdata，最终态Hello Vedux7！这里是默认vedux的节流setdata。\n    this.fetchAPI({motto: 'Hello Vedux!'})\n    this.fetchAPI({motto: 'Hello Vedux2!'})\n    this.fetchAPI({motto: 'Hello Vedux3!'})\n    this.fetchAPI({motto: 'Hello Vedux4!'})\n    this.fetchAPI({motto: 'Hello Vedux5!'})\n    this.fetchAPI({motto: 'Hello Vedux6!'})\n    this.fetchAPI({motto: 'Hello Vedux7!'})\n    // 触发7次setdata，最终态Hello Vedux7！这里是改为同步setdata，每次dispatch action导致store变化都会导致页面同步setdata，在比如登录后必须同步拿到数据是必要的。写法差异主要体现在reducer中的专用key使用。\n    this.fetchAPI2({motto: 'Hello Vedux!'})\n    this.fetchAPI2({motto: 'Hello Vedux2!'})\n    this.fetchAPI2({motto: 'Hello Vedux3!'})\n    this.fetchAPI2({motto: 'Hello Vedux4!'})\n    this.fetchAPI2({motto: 'Hello Vedux5!'})\n    this.fetchAPI2({motto: 'Hello Vedux6!'})\n    this.fetchAPI2({motto: 'Hello Vedux7!'})\n  },\n};\n\nconst mapStateToData = ({user, home}, options) => {\n  return {\n    userInfo: user.userInfo,\n    motto: home.motto,\n  };\n};\n\nconst mapDispatchToPage = dispatch => ({\n  storeUserInfo: userInfo => {\n    dispatch(storeUserInfo(userInfo));\n  },\n  fetchAPI: (payload) => {\n    // action第二个参数是callback，当这次action引起data变更后触发\n    dispatch(fetchAPI(payload, () => {\n      // TODO\n    }))\n  },\n  fetchAPI2: payload => {\n    // action第二个参数是options，目前可以设置 {lazy: [boolean]} 是否延时setData，默认true，即延时100ms\n    dispatch(fetchAPI(payload, () => {\n      // TODO\n    }, {\n      lazy: false,\n    }));\n  },\n});\n\nPage(connect(\n  mapStateToData,\n  mapDispatchToPage,\n)(pageConfig));\n","position":{"start":{"line":14,"column":1,"offset":216},"end":{"line":75,"column":4,"offset":1883},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"reducers/home.js","position":{"start":{"line":77,"column":1,"offset":1885},"end":{"line":77,"column":17,"offset":1901},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":1885},"end":{"line":77,"column":17,"offset":1901},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import { types } from '../actions/home';\nimport { CONST } from 'vedux'; // 从vedux中引入特定key常量\n\nconst initialState = {\n  motto: null,\n};\n\nexport default function user(state = initialState, action = {}) {\n  switch (action.type) {\n    case types.HOME_FETCH_API:\n      return {\n        ...state,\n        motto: action.payload.motto,\n        // vedux回调函数【专用key】，在store变化导致setdata的回调中执行\n        [CONST.VEDUX_CB]: action.cb,\n        // vedux可选配置【专用key】，决定是否同步执行setdata，此专用key的值中无{lazy:false}，则默认为异步执行\n        [CONST.VEDUX_OPTS]: action.options,\n      };\n\n    default:\n      return state;\n  }\n}\n","position":{"start":{"line":79,"column":1,"offset":1903},"end":{"line":104,"column":4,"offset":2498},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"store导致setdata后的回调","position":{"start":{"line":106,"column":4,"offset":2503},"end":{"line":106,"column":22,"offset":2521},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":2500},"end":{"line":106,"column":22,"offset":2521},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在某些场景，此次dispatch action后，需要在页面渲染后做一些回调，比如曝光埋点、页面渲染计时等。在上例中，fetchAPI的第二个参数会传给reducer的","position":{"start":{"line":108,"column":1,"offset":2523},"end":{"line":108,"column":85,"offset":2607},"indent":[]}},{"type":"linkReference","identifier":"const.vedux_cb","label":"CONST.VEDUX_CB","referenceType":"shortcut","children":[{"type":"text","value":"CONST.VEDUX_CB","position":{"start":{"line":108,"column":86,"offset":2608},"end":{"line":108,"column":100,"offset":2622},"indent":[]}}],"position":{"start":{"line":108,"column":85,"offset":2607},"end":{"line":108,"column":101,"offset":2623},"indent":[]}},{"type":"text","value":"专用key，这就是setdata后的回调。","position":{"start":{"line":108,"column":101,"offset":2623},"end":{"line":108,"column":122,"offset":2644},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":2523},"end":{"line":108,"column":122,"offset":2644},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"connect后两个参数使用","position":{"start":{"line":110,"column":4,"offset":2649},"end":{"line":110,"column":18,"offset":2663},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":2646},"end":{"line":110,"column":18,"offset":2663},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"vedux的connect仿造react-redux中的connect，也有四个意思相近的参数。在上例中加入如下代码：","position":{"start":{"line":112,"column":1,"offset":2665},"end":{"line":112,"column":60,"offset":2724},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":2665},"end":{"line":112,"column":60,"offset":2724},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// 用于处理本次action触发变更的数据，用于最终做stateDiff。三个参数（已由vedux传入）可以在函数中使用，ownProps默认包括了extraOptions和onLoad的options。\nconst mergeProps = (\n  propsFromState, // 本次mapStateToData返回的数据\n  page, // 当前页面\n  ownProps, // onLoad的options以及extraOptions\n) => {\n  return {\n    // 页面本身data\n  };\n};\n\nconst extraOptions = {\n  // mergeProps需要的额外参数\n};\n\nPage(connect(\n  mapStateToData,\n  mapDispatchToPage,\n  mergeProps,\n  extraOptions,\n)(pageConfig));","position":{"start":{"line":114,"column":1,"offset":2726},"end":{"line":136,"column":4,"offset":3163},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"异步action，中间件使用","position":{"start":{"line":138,"column":4,"offset":3168},"end":{"line":138,"column":18,"offset":3182},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":3165},"end":{"line":138,"column":18,"offset":3182},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"比如thunk使用，接入方式和react-redux一样","position":{"start":{"line":140,"column":1,"offset":3184},"end":{"line":140,"column":29,"offset":3212},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":3184},"end":{"line":140,"column":29,"offset":3212},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"store.js","position":{"start":{"line":142,"column":1,"offset":3214},"end":{"line":142,"column":9,"offset":3222},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":3214},"end":{"line":142,"column":9,"offset":3222},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const {\n  createStore,\n  applyMiddleware,\n  // compose,\n} = require('redux');\nimport thunk from 'redux-thunk';\n\nconst reducer = require('./reducers');\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(thunk)\n  // \tcreateEnhancer({\n  // \t\tbeforeDispatch: [],\n  // \t\tafterDispatch: [wmRequest.update],\n  // \t})\n);\n\nexport default store;","position":{"start":{"line":143,"column":1,"offset":3223},"end":{"line":163,"column":4,"offset":3582},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"action/home.js","position":{"start":{"line":165,"column":1,"offset":3584},"end":{"line":165,"column":15,"offset":3598},"indent":[]}}],"position":{"start":{"line":165,"column":1,"offset":3584},"end":{"line":165,"column":15,"offset":3598},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"export const types = {\n  HOME_FETCH_API: 'HOME_FETCH_API',\n};\n\nconst fetch = (data, t = 0) =>\n  new Promise(resolve => {\n    setTimeout(resolve, t, data);\n  });\n\nexport function fetchAPI(payload) {\n  return dispatch => {\n    return fetch(payload, 1500).then(data => {\n      dispatch({\n        type: types.HOME_FETCH_API,\n        payload: data,\n      });\n    });\n  };\n}","position":{"start":{"line":166,"column":1,"offset":3599},"end":{"line":186,"column":4,"offset":3985},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":189,"column":1,"offset":3988},"end":{"line":189,"column":31,"offset":4018},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":189,"column":31,"offset":4018}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/ludejun/ludejun/vedux/docs/node_modules/@wmfe/gatsby-theme-pocket/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"高级使用\"\n    }}>{`高级使用`}</h1>\n    <h2 {...{\n      \"id\": \"同步异步的setdata\"\n    }}>{`同步/异步的setdata`}</h2>\n    <p>{`将快速接入的数据流稍作更改：\npages/index/index.js`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { connect } from 'vedux';\nimport { fetchAPI } from '../../actions/home';\n\nconst pageConfig = {\n  data: {\n    motto: 'Hello World!',\n    userInfo: {},\n  },\n  onLoad() {\n    // 触发1次setdata，最终态Hello Vedux7！这里是默认vedux的节流setdata。\n    this.fetchAPI({motto: 'Hello Vedux!'})\n    this.fetchAPI({motto: 'Hello Vedux2!'})\n    this.fetchAPI({motto: 'Hello Vedux3!'})\n    this.fetchAPI({motto: 'Hello Vedux4!'})\n    this.fetchAPI({motto: 'Hello Vedux5!'})\n    this.fetchAPI({motto: 'Hello Vedux6!'})\n    this.fetchAPI({motto: 'Hello Vedux7!'})\n    // 触发7次setdata，最终态Hello Vedux7！这里是改为同步setdata，每次dispatch action导致store变化都会导致页面同步setdata，在比如登录后必须同步拿到数据是必要的。写法差异主要体现在reducer中的专用key使用。\n    this.fetchAPI2({motto: 'Hello Vedux!'})\n    this.fetchAPI2({motto: 'Hello Vedux2!'})\n    this.fetchAPI2({motto: 'Hello Vedux3!'})\n    this.fetchAPI2({motto: 'Hello Vedux4!'})\n    this.fetchAPI2({motto: 'Hello Vedux5!'})\n    this.fetchAPI2({motto: 'Hello Vedux6!'})\n    this.fetchAPI2({motto: 'Hello Vedux7!'})\n  },\n};\n\nconst mapStateToData = ({user, home}, options) => {\n  return {\n    userInfo: user.userInfo,\n    motto: home.motto,\n  };\n};\n\nconst mapDispatchToPage = dispatch => ({\n  storeUserInfo: userInfo => {\n    dispatch(storeUserInfo(userInfo));\n  },\n  fetchAPI: (payload) => {\n    // action第二个参数是callback，当这次action引起data变更后触发\n    dispatch(fetchAPI(payload, () => {\n      // TODO\n    }))\n  },\n  fetchAPI2: payload => {\n    // action第二个参数是options，目前可以设置 {lazy: [boolean]} 是否延时setData，默认true，即延时100ms\n    dispatch(fetchAPI(payload, () => {\n      // TODO\n    }, {\n      lazy: false,\n    }));\n  },\n});\n\nPage(connect(\n  mapStateToData,\n  mapDispatchToPage,\n)(pageConfig));\n\n`}</code></pre>\n    <p>{`reducers/home.js`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { types } from '../actions/home';\nimport { CONST } from 'vedux'; // 从vedux中引入特定key常量\n\nconst initialState = {\n  motto: null,\n};\n\nexport default function user(state = initialState, action = {}) {\n  switch (action.type) {\n    case types.HOME_FETCH_API:\n      return {\n        ...state,\n        motto: action.payload.motto,\n        // vedux回调函数【专用key】，在store变化导致setdata的回调中执行\n        [CONST.VEDUX_CB]: action.cb,\n        // vedux可选配置【专用key】，决定是否同步执行setdata，此专用key的值中无{lazy:false}，则默认为异步执行\n        [CONST.VEDUX_OPTS]: action.options,\n      };\n\n    default:\n      return state;\n  }\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"store导致setdata后的回调\"\n    }}>{`store导致setdata后的回调`}</h2>\n    <p>{`在某些场景，此次dispatch action后，需要在页面渲染后做一些回调，比如曝光埋点、页面渲染计时等。在上例中，fetchAPI的第二个参数会传给reducer的`}{`[CONST.VEDUX_CB]`}{`专用key，这就是setdata后的回调。`}</p>\n    <h2 {...{\n      \"id\": \"connect后两个参数使用\"\n    }}>{`connect后两个参数使用`}</h2>\n    <p>{`vedux的connect仿造react-redux中的connect，也有四个意思相近的参数。在上例中加入如下代码：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// 用于处理本次action触发变更的数据，用于最终做stateDiff。三个参数（已由vedux传入）可以在函数中使用，ownProps默认包括了extraOptions和onLoad的options。\nconst mergeProps = (\n  propsFromState, // 本次mapStateToData返回的数据\n  page, // 当前页面\n  ownProps, // onLoad的options以及extraOptions\n) => {\n  return {\n    // 页面本身data\n  };\n};\n\nconst extraOptions = {\n  // mergeProps需要的额外参数\n};\n\nPage(connect(\n  mapStateToData,\n  mapDispatchToPage,\n  mergeProps,\n  extraOptions,\n)(pageConfig));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"异步action，中间件使用\"\n    }}>{`异步action，中间件使用`}</h2>\n    <p>{`比如thunk使用，接入方式和react-redux一样`}</p>\n    <p>{`store.js`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const {\n  createStore,\n  applyMiddleware,\n  // compose,\n} = require('redux');\nimport thunk from 'redux-thunk';\n\nconst reducer = require('./reducers');\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(thunk)\n  //    createEnhancer({\n  //        beforeDispatch: [],\n  //        afterDispatch: [wmRequest.update],\n  //    })\n);\n\nexport default store;\n`}</code></pre>\n    <p>{`action/home.js`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`export const types = {\n  HOME_FETCH_API: 'HOME_FETCH_API',\n};\n\nconst fetch = (data, t = 0) =>\n  new Promise(resolve => {\n    setTimeout(resolve, t, data);\n  });\n\nexport function fetchAPI(payload) {\n  return dispatch => {\n    return fetch(payload, 1500).then(data => {\n      dispatch({\n        type: types.HOME_FETCH_API,\n        payload: data,\n      });\n    });\n  };\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}